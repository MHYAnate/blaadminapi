generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id               Int                @id @default(autoincrement())
//   email            String             @unique @maxLength(255)
//   phoneNumber      String?            @maxLength(20)
//   isVerified       Boolean            @default(false)
//   type             UserType           @default(INDIVIDUAL)
//   password         String             @maxLength(255)
//   createdAt        DateTime           @default(now())
//   updatedAt        DateTime           @updatedAt
//   lastLoginAt      DateTime?
//   businessProfile  BusinessProfile?
//   preferences      UserPreference?
//   profile          UserProfile?
//   verificationCode VerificationCode[]
//   orders           Order[]
//   cart             Cart?             
//   savedBy          SavedProduct[]
//   roles            UserRole[]
//   notifications    Notification[]   
//   feedback         Feedback?
//   inventory        Inventory[]
//   addresses        Address[]         // New address book

//   @@index([email])
//   @@index([createdAt])
// }

  model User {
    id               Int                @id @default(autoincrement())
    email            String             @unique
    phoneNumber      String?
    isVerified       Boolean            @default(false)
    type             String             @default("individual")
    password         String
    status           UserStatus         @default(INACTIVE)

    // Referral system fields
    referralCode     String?            @unique
    referredBy       String?            // Stores the referral code used during registration
    hasFreeShipping  Boolean           @default(false) // Tracks if user has free shipping

    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    businessProfile  BusinessProfile?
    preferences      UserPreference?
    profile          UserProfile?
    adminProfile     AdminProfile?
    verificationCode VerificationCode[]
    orders           Order[]
    cart             Cart?             
    savedBy          SavedProduct[]  
    roles            UserRole[]      
    notifications    Notification[]   
    feedback         Feedback?
    inventory        Inventory[]
    address          Address[]
    businessInventory BusinessInventory[]
    histories       InventoryHistory[]
    paymentLinks     PaymentLink[]
    // Relations to Referral model
    // Referral system fields
    referralBonus    ReferralBonus[]
    referralsMade    Referral[]         @relation("referrer")
    referralsReceived Referral[]        @relation("referee")
  }

  model AdminProfile {
    id        Int      @id @default(autoincrement())
    userId    Int      @unique
    user      User     @relation(fields: [userId], references: [id])
    fullName  String
    username  String   @unique
    gender    String?
    phone     String
    role      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([username])
    @@index([role])
  }
  model UserProfile {
    id            Int      @id @default(autoincrement())
    userId        Int      @unique
    fullName      String?
    address       String?
    dob           DateTime?
    howDidYouHear String?
    deliveryPhone String?  // Add this field
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    user          User     @relation(fields: [userId], references: [id])
  }

  model BusinessProfile {
    id              Int      @id @default(autoincrement())
    userId          Int      @unique
    fullName        String?  
    businessName    String?
    businessAddress String?
    cacNumber       String?
    howDidYouHear   String?
    businessPhone   String?  // Add this field
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    user            User     @relation(fields: [userId], references: [id])
  }

  model UserPreference {
    id         Int      @id @default(autoincrement())
    userId     Int      @unique
    preference String[]
    user       User     @relation(fields: [userId], references: [id])
  }

  model Address {
    id              Int       @id @default(autoincrement())
    userId          Int
    user            User      @relation(fields: [userId], references: [id])
    phoneNumber     String?   
    addressLine1    String    
    addressLine2    String?   
    city            String    
    stateProvince   String    
    postalCode      String    
    country         String    
    isDefault       Boolean   @default(false) 
    isActive        Boolean   @default(false)
    addressType     AddressType @default(SHIPPING) 
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    // Indexes for better query performance
    @@index([userId])
    @@index([city])
    @@index([stateProvince])
    @@index([postalCode])
    @@index([isDefault])
  }


  // New model to track referral bonuses
  model ReferralBonus {
    id          Int      @id @default(autoincrement())
    userId      Int
    user        User     @relation(fields: [userId], references: [id])
    bonusType   String   @default("FREE_SHIPPING")
    earnedAt    DateTime @default(now())
    expiresAt   DateTime
    isUsed      Boolean  @default(false)
    usedAt      DateTime?
    referralId  Int?
    referral    Referral? @relation(fields: [referralId], references: [id])
  }

  // New model to track referrals
  model Referral {
    id           Int       @id @default(autoincrement())
    referrerId   Int
    referrer     User      @relation("referrer", fields: [referrerId], references: [id])
    refereeId    Int
    referee      User      @relation("referee", fields: [refereeId], references: [id])
    refereeEmail String
    referralCode String
    createdAt    DateTime  @default(now())
    bonusesGiven ReferralBonus[]
    isCompleted  Boolean   @default(false)

    @@unique([referrerId, refereeId])
    @@index([referralCode])
    @@index([createdAt])
  }



  model VerificationCode {
    id        Int      @id @default(autoincrement())
    userId    Int      @unique
    code      String
    expiresAt DateTime
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
  }

  model Product {
    id             Int             @id @default(autoincrement())
    name           String
    description    String
    categoryId     Int         
    category       Category        @relation(fields: [categoryId], references: [id])
    options        ProductOption[]  
    manufacturerId Int
    manufacturer   Manufacturer    @relation(fields: [manufacturerId], references: [id])
    isActive       Boolean         @default(false)
    type           String          @default("platform") 
    businessOwnerId Int?        
    platformProductId Int?    
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    orders         OrderItem[]     
    savedByUsers   SavedProduct[] 
    deals          Deal[]
    inventory        Inventory[]
    businessInventory BusinessInventory[]
  }



  model ProductOption {
    id              Int         @id @default(autoincrement())
    value           String
    weight          Float       @default(0)      
    stockPrice      Float       @default(0)      
    sellingPrice    Float       @default(0)     
    markupType      MarkupType  @default(FIXED) 
    markupValue     Float       @default(0)
    price           Float       
    moq             Int         @default(1)
    image           String[]
    productId       Int
    unit            String
    product         Product     @relation(fields: [productId], references: [id])
    cartItems       CartItem[]  
    inventory       Int         @default(0)
    lowStockThreshold Int       @default(10)
    platformProductOptionId Int? // Reference to original platform option
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    businessInventory BusinessInventory[]
  }

  model Category {
    id        Int       @id @default(autoincrement())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    products  Product[]
    deals     Deal[]    // Reverse relation to Deal
  }

  model Manufacturer {
    id             Int        @id @default(autoincrement())
    name           String     @unique
    country        String
    logo           String?
    email          String?     @unique
    phone          String?
    contactPerson  String?     // Changed from contact_person to camelCase for consistency
    status         Boolean    @default(false)
    createdAt      DateTime   @default(now())
    updatedAt      DateTime  @updatedAt
    products       Product[]

    // Recommended indexes for better query performance
    @@index([name])
    @@index([email])
    @@index([status])
  }

  model Cart {
    id        Int      @id @default(autoincrement())
    userId    Int      @unique
    user      User     @relation(fields: [userId], references: [id])
    items     CartItem[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  }

  model CartItem {
    id             Int           @id @default(autoincrement())
    cartId         Int
    cart           Cart          @relation(fields: [cartId], references: [id])
    productOptionId Int
    productOption  ProductOption @relation(fields: [productOptionId], references: [id])
    quantity       Int           @default(1)
    note           String?
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
  }

  model SavedProduct {
    id        Int      @id @default(autoincrement())
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    productId Int
    product   Product  @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, productId]) // Ensure a user can't save the same product multiple times
  }

  model Transaction {
    id          Int      @id @default(autoincrement())
    orderId     Int
    order       Order    @relation(fields: [orderId], references: [id])
    amount      Float
    reference   String   @unique // Paystack transaction reference
    status      String   @default("pending") // e.g., pending, success, failed
    gateway     String   @default("paystack") // Payment gateway name
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
  }

// model Order {
//   id           Int          @id @default(autoincrement())
//   userId       Int
//   user         User         @relation(fields: [userId], references: [id])
//   items        OrderItem[]
//   totalPrice   Float
//   status       OrderStatus  @default(PENDING)
//   orderType    String       @default("IMMEDIATE")
//   scheduledDate DateTime?
//   transactions Transaction[]
//   paymentLinks PaymentLink[] // Changed to plural since one order could have multiple payment links (though we'll limit to one active)
//   createdAt    DateTime     @default(now())
//   updatedAt    DateTime     @updatedAt
//   shipping     Shipping?    // Add this line to create the reverse relation
//   paymentStatus PaymentStatus @default(PENDING)
//   timeline     OrderTimeline[]
// }

  model Order {
    id           Int          @id @default(autoincrement())
    userId       Int
    user         User         @relation(fields: [userId], references: [id])
    items        OrderItem[]
    totalPrice   Float        // Total order value (products + shipping)
    amountPaid   Float        @default(0) // Amount already paid
    amountDue    Float        // Amount currently due
    status       OrderStatus  @default(PENDING)
    orderType    String       @default("IMMEDIATE")
    paymentStatus PaymentStatus @default(PENDING)
    scheduledDate DateTime?
    updatedAt    DateTime     @updatedAt
    createdAt    DateTime     @default(now())
    shippingPaymentType ShippingPaymentType @default(PAY_NOW)
    transactions Transaction[]
    paymentLinks PaymentLink[]
    shipping     Shipping?
    timeline     OrderTimeline[]
  }

  // model OrderItem {
  //   id          Int      @id @default(autoincrement())
  //   productId   Int
  //   product     Product  @relation(fields: [productId], references: [id])
  //   orderId     Int
  //   order       Order    @relation(fields: [orderId], references: [id])
  //   quantity    Int
  //   price       Float    
  //   selectedOption String 
  //   originalProductOptionId Int?
  //   businessProductId Int?
  //   businessProductOptionId Int?
  //   createdAt   DateTime @default(now())
  //   updatedAt   DateTime @updatedAt
  // }

  model OrderItem {
    id          Int      @id @default(autoincrement())
    productId   Int
    product     Product  @relation(fields: [productId], references: [id])
    orderId     Int
    order       Order    @relation(fields: [orderId], references: [id])
    quantity    Int
    price       Float    
    selectedOption String 
    originalProductOptionId Int?
    businessProductId Int?
    businessProductOptionId Int?
    paymentStatus PaymentStatus @default(PENDING)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
  }

  model Notification {
    id        Int             @id @default(autoincrement())
    userId    Int             // The user who will receive the notification
    user      User            @relation(fields: [userId], references: [id])
    title     String          // Notification title
    message   String          // Notification message
    type      NotificationType? 
    metadata  Json?           // Additional metadata (e.g., orderId)
    isRead    Boolean         @default(false) // Whether the notification has been read
    createdAt DateTime        @default(now()) // When the notification was created
    updatedAt DateTime        @updatedAt      // When the notification was last updated
  }

  model EarlyAccessTable {
    id        Int      @id @default(autoincrement())
    name      String
    location  String
    email     String   @unique
    phone     String
    createdAt DateTime @default(now())
  }

  model NewsLetter {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    createdAt DateTime @default(now())
  }

  model SuggestedCity {
    id        Int      @id @default(autoincrement())
    cityName  String   
    createdAt DateTime @default(now())
  }

  model ContactMessage {
    id        Int      @id @default(autoincrement())
    name      String
    email     String
    message   String
    createdAt DateTime @default(now())
  }

  model UpdateSubscriber {
    id        Int      @id @default(autoincrement())
    name      String
    email     String   @unique
    createdAt DateTime @default(now())
  }

// New models for roles and permissions
  model Role {
    id          Int      @id @default(autoincrement())
    name        String   @unique
    description String?
    permissions Permission[]
    users       UserRole[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
  }

  model Permission {
    id          Int      @id @default(autoincrement())
    name        String   @unique
    description String?
    roles       Role[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
  }

  model UserRole {
    id        Int      @id @default(autoincrement())
    userId    Int
    roleId    Int
    user      User     @relation(fields: [userId], references: [id])
    role      Role     @relation(fields: [roleId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, roleId]) 
  }


  model Deal {
    id              Int             @id @default(autoincrement())
    name            String          
    description     String?         
    type            DealType        
    value           Float           
    banner          String?
    startDate       DateTime        
    endDate         DateTime        
    isActive        Boolean         @default(false)
    products        Product[]       
    categories      Category[]      
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
  }

  model Shipping {
    id              Int       @id @default(autoincrement())
    orderId         Int       @unique 
    order           Order     @relation(fields: [orderId], references: [id])
    distance        Float    
    totalWeight     Float    
    distanceFee     Float    
    weightFee       Float    
    totalShippingFee Float   
    paymentType     ShippingPaymentType @default(PAY_NOW)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
  }

  model Feedback {
    id        Int      @id @default(autoincrement())
    userId    Int      @unique
    user      User     @relation(fields: [userId], references: [id])
    message   String   
    createdAt DateTime @default(now()) // When the feedback was created
    updatedAt DateTime @updatedAt      // When the feedback was last updated
  }

  model Inventory {
    id              Int       @id @default(autoincrement())
    productId       Int       
    product         Product   @relation(fields: [productId], references: [id])
    businessUserId  Int       // Business user ID
    businessUser    User      @relation(fields: [businessUserId], references: [id])
    quantity        Int       // Quantity of the product in inventory
    source          String    // Source of the product (e.g., "platform" or "manual")
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    @@unique([productId, businessUserId, source]) // Ensure no duplicate entries
  }

  model OrderTimeline {
    id        Int      @id @default(autoincrement())
    orderId   Int
    order     Order    @relation(fields: [orderId], references: [id])
    action    String
    status    String
    details   Json?
    createdAt DateTime @default(now())
  }


  model BusinessInventory {
    id              Int               @id @default(autoincrement())
    productId       Int
    product         Product           @relation(fields: [productId], references: [id])
    productOptionId Int?
    productOption   ProductOption?    @relation(fields: [productOptionId], references: [id])
    userId          Int               // Consistent with your other models (lowercase)
    user            User              @relation(fields: [userId], references: [id]) // Lowercase relation name
    currentStock    Int               @default(0)
    minStockLevel   Int               @default(10)
    maxStockLevel   Int?              
    reorderPoint    Int               
    status          InventoryStatus   @default(IN_STOCK)
    lastStockUpdate DateTime?         
    lastAudit       DateTime?         
    notes           String?
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    histories       InventoryHistory[] 

    @@unique([productId, productOptionId, userId]) // Consistent field naming
    @@index([status])
    @@index([currentStock])
    @@index([userId]) // Lowercase field name
  }

  model InventoryHistory {
    id          Int       @id @default(autoincrement())
    inventoryId Int
    inventory   BusinessInventory @relation(fields: [inventoryId], references: [id])
    userId      Int
    user        User      @relation(fields: [userId], references: [id])
    changeAmount Int
    previousStock Int
    newStock    Int
    changeType  String    // 'STOCK_IN', 'STOCK_OUT', 'ADJUSTMENT'
    notes       String?
    createdAt   DateTime  @default(now())
  }

  model PaymentLink {
    id        Int      @id @default(autoincrement())
    orderId   Int
    order     Order    @relation(fields: [orderId], references: [id])
    token     String   @unique
    expiresAt DateTime
    used      Boolean  @default(false)
    usedAt    DateTime?
    createdAt DateTime @default(now())
    createdBy Int      // User who created the payment link
    user      User     @relation(fields: [createdBy], references: [id])

    @@index([token])
  }

  enum InventoryStatus {
    IN_STOCK
    LOW_STOCK
    OUT_OF_STOCK
    OVERSTOCKED
    ON_ORDER
    DISCONTINUED
    BACKORDER
  }

  enum OrderStatus {
    PENDING
    SCHEDULED
    PROCESSING
    COMPLETED
    CANCELLED
    SHIPPED
    DELIVERED
  }


  enum PaymentStatus {
    PENDING
    PAID
    PARTIALLY_PAID
    REFUNDED
    PARTIALLY_REFUNDED
    FAILED
  }

  enum UserType {
    INDIVIDUAL
    BUSINESS
  }

  enum MarkupType {
    FIXED
    PERCENTAGE
  }

  enum DealType {
    PERCENTAGE_DISCOUNT 
    FIXED_DISCOUNT      
    BOGO
  }


  enum NotificationType {
    ORDER
    NEWS
    SYSTEM
    CART
    PROMOTION
    ALERT
    UPDATE
  }

  enum UserStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
  }

  enum ProductType {
      PLATFORM
      BUSINESS
  }

  enum ShippingPaymentType {
    PAY_NOW
    PAY_ON_DELIVERY
  }

  enum AddressType {
    SHIPPING
    BILLING
    BOTH
  }